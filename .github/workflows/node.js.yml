# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test --if-present

  deploy:
    needs: build
    runs-on: ubuntu-latest
    # 只有当推送到 main 分支时才部署（不在 PR 时部署）
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Add SSH known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build --if-present

    # 部署到Windows服务器
    - name: Deploy to Windows Server via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        debug: true
        script: |
          echo "========== 开始部署 =========="
          echo "当前时间: $(date)"
          echo "当前用户: $(whoami)"
          echo "当前目录: $(pwd)"
          echo "系统信息: $(uname -a)"
          
          echo "========== 检查目录 =========="
          echo "检查 /c/wwwroot/ 目录:"
          ls -la /c/wwwroot/ 2>/dev/null || echo "路径 /c/wwwroot/ 不存在"
          
          echo "检查 C:/wwwroot/ 目录:"
          ls -la "C:/wwwroot/" 2>/dev/null || echo "路径 C:/wwwroot/ 不存在"
          
          echo "检查 /mnt/c/wwwroot/ 目录:"
          ls -la /mnt/c/wwwroot/ 2>/dev/null || echo "路径 /mnt/c/wwwroot/ 不存在"
          
          # 尝试找到正确的项目路径
          PROJECT_PATH=""
          if [ -d "/c/wwwroot/game_box" ]; then
            PROJECT_PATH="/c/wwwroot/game_box"
          elif [ -d "C:/wwwroot/game_box" ]; then
            PROJECT_PATH="C:/wwwroot/game_box"
          elif [ -d "/mnt/c/wwwroot/game_box" ]; then
            PROJECT_PATH="/mnt/c/wwwroot/game_box"
          else
            echo "错误: 找不到项目目录，尝试在以下位置搜索:"
            find / -name "game_box" -type d 2>/dev/null | head -5 || echo "搜索失败"
            exit 1
          fi
          
          echo "找到项目目录: $PROJECT_PATH"
          cd "$PROJECT_PATH"
          echo "成功进入目录: $(pwd)"
          
          echo "========== Git 检查 =========="
          git --version || { echo "Git 不可用"; exit 1; }
          git config --global --add safe.directory "$PROJECT_PATH"
          git status || { echo "Git status 失败"; exit 1; }
          
          echo "当前分支: $(git branch --show-current)"
          echo "最新提交: $(git log --oneline -1)"
          
          echo "========== 重置和拉取 =========="
          git reset --hard HEAD
          git clean -fd
          git fetch origin
          git pull origin main
          echo "拉取后提交: $(git log --oneline -1)"
          
          echo "========== Node.js 环境 =========="
          # 尝试多种方式加载 Node.js
          if [ -f ~/.nvm/nvm.sh ]; then
            echo "加载 NVM..."
            source ~/.nvm/nvm.sh
            nvm use 18 2>/dev/null || nvm use node 2>/dev/null || echo "NVM 使用失败"
          fi
          
          # 检查常见的 Node.js 路径
          export PATH="$PATH:/usr/local/bin:/usr/bin:/bin"
          export PATH="$PATH:$HOME/.nvm/versions/node/*/bin"
          
          echo "Node.js 版本: $(node --version 2>/dev/null || echo '不可用')"
          echo "NPM 版本: $(npm --version 2>/dev/null || echo '不可用')"
          
          # 如果 Node.js 不可用，尝试其他方法
          if ! command -v node >/dev/null 2>&1; then
            echo "尝试查找 Node.js..."
            find /usr -name "node" -type f 2>/dev/null | head -3
            which node 2>/dev/null || echo "未找到 node 命令"
          fi
          
          echo "========== 安装依赖 =========="
          if command -v npm >/dev/null 2>&1; then
            npm ci || npm install
            echo "依赖安装完成"
          else
            echo "错误: NPM 不可用，无法安装依赖"
            exit 1
          fi
          
          echo "========== 构建项目 =========="
          npm run build || { echo "构建失败"; exit 1; }
          echo "构建完成"
          
          echo "========== 重启服务 =========="
          if command -v pm2 >/dev/null 2>&1; then
            echo "使用 PM2 重启..."
            pm2 restart game_box || pm2 start npm --name "game_box" -- start
            pm2 list
          else
            echo "PM2 不可用"
          fi
          
          echo "========== 部署完成 =========="
          echo "完成时间: $(date)"

