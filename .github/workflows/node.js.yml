# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test --if-present

  deploy:
    needs: build
    runs-on: ubuntu-latest
    # 只有当推送到 main 分支时才部署（不在 PR 时部署）
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build --if-present

    # 部署到Windows服务器
    - name: Deploy to Windows Server via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          echo "========================================"
          echo "开始部署到Windows服务器..."
          echo "部署时间: %date% %time%"
          echo "========================================"
          
          REM 检查当前目录
          echo "当前工作目录: %cd%"
          
          REM 进入项目目录并验证
          if not exist "C:\wwwroot\game_box" (
            echo "错误: 项目目录 C:\wwwroot\game_box 不存在！"
            exit /b 1
          )
          
          cd /d C:\wwwroot\game_box
          if errorlevel 1 (
            echo "错误: 无法进入项目目录 C:\wwwroot\game_box"
            exit /b 1
          )
          
          echo "成功进入项目目录: %cd%"
          
          REM 检查Git状态
          echo "========================================"
          echo "检查Git状态..."
          git status
          if errorlevel 1 (
            echo "错误: Git命令执行失败，请检查Git是否正确安装"
            exit /b 1
          )
          
          REM 显示当前分支和最新提交
          echo "当前分支:"
          git branch
          echo "最新提交:"
          git log --oneline -5
          
          REM 强制重置本地更改（如果有的话）
          echo "========================================"
          echo "重置本地更改..."
          git reset --hard HEAD
          git clean -fd
          
          REM 拉取最新代码
          echo "========================================"
          echo "拉取最新代码..."
          git fetch origin
          if errorlevel 1 (
            echo "错误: Git fetch 失败"
            exit /b 1
          )
          
          git pull origin main
          if errorlevel 1 (
            echo "错误: Git pull 失败"
            git status
            exit /b 1
          )
          
          echo "代码拉取完成！"
          
          REM 显示更新后的状态
          echo "========================================"
          echo "更新后的Git状态:"
          git log --oneline -3
          git status
          
          REM 安装依赖
          echo "========================================"
          echo "安装项目依赖..."
          npm ci
          if errorlevel 1 (
            echo "错误: 依赖安装失败"
            exit /b 1
          )
          echo "依赖安装完成"
          
          REM 构建项目
          echo "========================================"
          echo "构建项目..."
          npm run build
          if errorlevel 1 (
            echo "错误: 项目构建失败"
            exit /b 1
          )
          echo "项目构建完成"
          
          REM 重启服务
          echo "========================================"
          echo "重启服务..."
          pm2 restart game_box
          if errorlevel 1 (
            echo "警告: PM2重启可能失败，尝试手动启动"
            pm2 start npm --name "game_box" -- start
          )
          
          echo "========================================"
          echo "部署完成！服务重启成功"
          echo "完成时间: %date% %time%"
          echo "========================================"

