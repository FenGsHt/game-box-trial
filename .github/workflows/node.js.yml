# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test --if-present

  deploy:
    needs: build
    runs-on: ubuntu-latest
    # 只有当推送到 main 分支时才部署（不在 PR 时部署）
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build --if-present

    # 部署到Windows服务器
    - name: Deploy to Windows Server via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          powershell -Command "
          Write-Host '========================================'
          Write-Host '开始部署到Windows服务器...'
          Write-Host '部署时间:' (Get-Date)
          Write-Host '========================================'
          
          # 检查当前目录
          Write-Host '当前工作目录:' (Get-Location)
          
          # 检查项目目录是否存在
          if (-not (Test-Path 'C:\wwwroot\game_box')) {
            Write-Host '错误: 项目目录 C:\wwwroot\game_box 不存在！'
            exit 1
          }
          
          # 进入项目目录
          Set-Location -Path 'C:\wwwroot\game_box'
          Write-Host '成功进入项目目录:' (Get-Location)
          
          # 检查Git状态
          Write-Host '========================================'
          Write-Host '检查Git状态...'
          
          try {
            git --version
            Write-Host 'Git版本检查成功'
          } catch {
            Write-Host '错误: Git命令不可用'
            exit 1
          }
          
          # 显示当前分支和提交
          Write-Host '当前分支:'
          git branch
          Write-Host '最新提交:'
          git log --oneline -3
          
          # 检查工作区状态
          Write-Host '工作区状态:'
          git status --porcelain
          
          # 强制重置本地更改
          Write-Host '========================================'
          Write-Host '重置本地更改...'
          git reset --hard HEAD
          git clean -fd
          Write-Host '本地更改重置完成'
          
          # 获取远程更新
          Write-Host '========================================'
          Write-Host '获取远程更新...'
          try {
            git fetch origin
            Write-Host 'Git fetch 成功'
          } catch {
            Write-Host '错误: Git fetch 失败'
            exit 1
          }
          
          # 检查是否有新提交
          \$commitsBehind = git rev-list HEAD..origin/main --count
          Write-Host \"本地落后远程 \$commitsBehind 个提交\"
          
          if (\$commitsBehind -eq '0') {
            Write-Host '代码已是最新版本'
          } else {
            Write-Host \"发现 \$commitsBehind 个新提交，开始拉取...\"
            try {
              git pull origin main
              Write-Host '代码拉取成功！'
            } catch {
              Write-Host '错误: Git pull 失败'
              git status
              exit 1
            }
          }
          
          # 显示更新后状态
          Write-Host '========================================'
          Write-Host '更新后状态:'
          git log --oneline -3
          git status
          
          # 检查Node.js环境
          Write-Host '========================================'
          Write-Host '检查Node.js环境...'
          try {
            node --version
            npm --version
            Write-Host 'Node.js环境检查成功'
          } catch {
            Write-Host '错误: Node.js不可用'
            exit 1
          }
          
          # 安装依赖
          Write-Host '========================================'
          Write-Host '安装项目依赖...'
          try {
            npm ci
            Write-Host '依赖安装完成'
          } catch {
            Write-Host '错误: 依赖安装失败，尝试清理重装...'
            if (Test-Path 'node_modules') { Remove-Item -Recurse -Force 'node_modules' }
            if (Test-Path 'package-lock.json') { Remove-Item -Force 'package-lock.json' }
            npm install
            Write-Host '依赖重新安装完成'
          }
          
          # 构建项目
          Write-Host '========================================'
          Write-Host '构建项目...'
          try {
            npm run build
            Write-Host '项目构建完成'
          } catch {
            Write-Host '错误: 项目构建失败，尝试忽略错误构建...'
            if (Test-Path 'deploy-override.js') {
              node deploy-override.js
              Write-Host '使用override构建完成'
            } else {
              Write-Host '构建最终失败'
              exit 1
            }
          }
          
          # 检查PM2状态
          Write-Host '========================================'
          Write-Host '检查PM2状态...'
          try {
            pm2 --version
            Write-Host 'PM2可用'
          } catch {
            Write-Host '错误: PM2不可用'
            exit 1
          }
          
          # 重启服务
          Write-Host '重启服务...'
          try {
            pm2 restart game_box
            Write-Host 'PM2重启成功'
          } catch {
            Write-Host '警告: PM2重启失败，尝试手动启动'
            try {
              pm2 stop game_box
              pm2 start npm --name 'game_box' -- start
              Write-Host 'PM2手动启动成功'
            } catch {
              Write-Host '错误: PM2启动失败'
              exit 1
            }
          }
          
          # 显示最终状态
          Write-Host '========================================'
          Write-Host '显示服务状态:'
          pm2 list
          Write-Host '========================================'
          Write-Host '部署完成！'
          Write-Host '完成时间:' (Get-Date)
          Write-Host '========================================'
          "

