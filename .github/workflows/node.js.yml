# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test --if-present

  deploy:
    needs: build
    runs-on: ubuntu-latest
    # 只有当推送到 main 分支时才部署（不在 PR 时部署）
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Add SSH known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build --if-present

    # 部署到Windows服务器
    - name: Deploy to Windows Server via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          echo "========================================="
          echo "开始部署到Windows服务器..."
          echo "部署时间: $(date)"
          echo "========================================="
          
          # 检查并进入项目目录
          echo "检查项目目录..."
          if [ ! -d "/c/wwwroot/game_box" ]; then
            echo "错误: 项目目录不存在"
            exit 1
          fi
          
          cd /c/wwwroot/game_box
          echo "当前目录: $(pwd)"
          
          # 设置Git配置（如果需要）
          git config --global --add safe.directory /c/wwwroot/game_box
          
          # 检查Git状态
          echo "========================================="
          echo "Git状态检查..."
          git status
          echo "当前分支: $(git branch --show-current)"
          echo "最新提交: $(git log --oneline -1)"
          
          # 强制重置本地更改
          echo "========================================="
          echo "重置本地更改..."
          git reset --hard HEAD
          git clean -fd
          
          # 拉取最新代码
          echo "========================================="
          echo "拉取最新代码..."
          git fetch origin
          git pull origin main
          echo "代码拉取完成"
          echo "更新后提交: $(git log --oneline -1)"
          
          # 检查Node.js环境
          echo "========================================="
          echo "检查Node.js环境..."
          
          # 如果使用nvm，加载nvm环境
          if [ -f ~/.nvm/nvm.sh ]; then
            echo "加载NVM环境..."
            source ~/.nvm/nvm.sh
            nvm use 18
          fi
          
          echo "Node.js版本: $(node --version)"
          echo "NPM版本: $(npm --version)"
          
          # 安装依赖
          echo "========================================="
          echo "安装项目依赖..."
          npm ci
          echo "依赖安装完成"
          
          # 构建项目
          echo "========================================="
          echo "构建项目..."
          npm run build
          echo "项目构建完成"
          
          # 重启服务
          echo "========================================="
          echo "重启服务..."
          
          # 检查PM2是否可用
          if command -v pm2 >/dev/null 2>&1; then
            echo "使用PM2重启服务..."
            pm2 restart game_box || pm2 start npm --name "game_box" -- start
            echo "PM2服务状态:"
            pm2 list
          else
            echo "PM2不可用，请手动启动服务"
          fi
          
          echo "========================================="
          echo "部署完成！"
          echo "完成时间: $(date)"
          echo "========================================="

